// <auto-generated />
using System;
using BigEvent.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BigEvent.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230830024145_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasCharSet(null, DelegationModes.ApplyToDatabases)
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("BigEvent.Core.Models.Allotment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_allotment");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("finish_date");

                    b.Property<DateTime?>("InitialDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("initial_date");

                    b.Property<int>("LimitGuests")
                        .HasColumnType("int")
                        .HasColumnName("limit_guest");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("num_allotment");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price_allotment");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("allotments");
                });

            modelBuilder.Entity("BigEvent.Core.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("event_Id");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email_event");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("event_date");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("imageUrl");

                    b.Property<string>("Local")
                        .HasColumnType("longtext")
                        .HasColumnName("local");

                    b.Property<int>("MaximumGuests")
                        .HasColumnType("int")
                        .HasColumnName("maximum_guests");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_event");

                    b.Property<string>("Theme")
                        .HasColumnType("longtext")
                        .HasColumnName("theme");

                    b.HasKey("Id");

                    b.ToTable("events");
                });

            modelBuilder.Entity("BigEvent.Core.Models.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name_social_media");

                    b.Property<int?>("SpeakerId")
                        .HasColumnType("int")
                        .HasColumnName("speaker_id");

                    b.Property<string>("URL")
                        .HasColumnType("longtext")
                        .HasColumnName("url_social_media");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("social_medias");
                });

            modelBuilder.Entity("BigEvent.Core.Models.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_speaker");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email_speaker");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name_speaker");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_speaker");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_speaker_url");

                    b.Property<string>("ResumeHistory")
                        .HasColumnType("longtext")
                        .HasColumnName("resume_speaker");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("speakers");
                });

            modelBuilder.Entity("BigEvent.Core.Models.SpeakerEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<int>("SpeakerId")
                        .HasColumnType("int")
                        .HasColumnName("speaker_id");

                    b.HasKey("EventId", "SpeakerId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("speaker_event");
                });

            modelBuilder.Entity("BigEvent.Core.Models.Allotment", b =>
                {
                    b.HasOne("BigEvent.Core.Models.Event", "Event")
                        .WithMany("Allotments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("BigEvent.Core.Models.SocialMedia", b =>
                {
                    b.HasOne("BigEvent.Core.Models.Event", "Event")
                        .WithMany("SocialMedias")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BigEvent.Core.Models.Speaker", "Speaker")
                        .WithMany("SocialMedias")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("BigEvent.Core.Models.Speaker", b =>
                {
                    b.HasOne("BigEvent.Core.Models.Event", null)
                        .WithMany("Speakers")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("BigEvent.Core.Models.SpeakerEvent", b =>
                {
                    b.HasOne("BigEvent.Core.Models.Event", "Event")
                        .WithMany("SpeakerEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BigEvent.Core.Models.Speaker", "Speaker")
                        .WithMany("SpeakerEvents")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("BigEvent.Core.Models.Event", b =>
                {
                    b.Navigation("Allotments");

                    b.Navigation("SocialMedias");

                    b.Navigation("SpeakerEvents");

                    b.Navigation("Speakers");
                });

            modelBuilder.Entity("BigEvent.Core.Models.Speaker", b =>
                {
                    b.Navigation("SocialMedias");

                    b.Navigation("SpeakerEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
